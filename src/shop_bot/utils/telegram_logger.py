# -*- coding: utf-8 -*-
"""
Telegram Logger - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram –±–æ—Ç–∞ —Å —É–º–Ω—ã–º rate limiting
"""

import asyncio
import logging
import traceback
from datetime import datetime, timezone, timedelta
from typing import Optional, List, Dict
from collections import deque
import aiohttp


class TelegramLoggerHandler(logging.Handler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –±–æ—Ç–∞.
    –í–∫–ª—é—á–∞–µ—Ç —É–º–Ω—ã–π rate limiting –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    
    # Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    MAX_MESSAGES_PER_SECOND = 20  # Telegram –ª–∏–º–∏—Ç ~30, –∏—Å–ø–æ–ª—å–∑—É–µ–º 20 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    MAX_MESSAGES_PER_MINUTE = 50  # Telegram –ª–∏–º–∏—Ç ~60, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50
    MAX_MESSAGE_LENGTH = 4000  # Telegram –ª–∏–º–∏—Ç 4096, –∏—Å–ø–æ–ª—å–∑—É–µ–º 4000
    
    def __init__(
        self,
        bot_token: str,
        admin_chat_id: str,
        log_level: str = "error",
        enabled: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (none, error, warning, all)
            enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        super().__init__()
        self.bot_token = bot_token
        self.admin_chat_id = admin_chat_id
        self.log_level = log_level
        self.enabled = enabled
        
        # Rate limiting
        self._message_timestamps = deque()  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self._message_queue = deque()  # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self._grouping_window = 10  # –û–∫–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self._max_logs_per_group = 20  # –ú–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._total_sent = 0
        self._total_dropped = 0
        self._last_send_time = None
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        self._sending = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_log_level()
        
    def _setup_log_level(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.enabled or self.log_level == "none":
            self.setLevel(logging.CRITICAL + 1)  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        elif self.log_level == "error":
            self.setLevel(logging.ERROR)
        elif self.log_level == "warning":
            self.setLevel(logging.WARNING)
        elif self.log_level == "all":
            self.setLevel(logging.DEBUG)
        else:
            self.setLevel(logging.ERROR)
    
    def emit(self, record: logging.LogRecord):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥-–∑–∞–ø–∏—Å–∏
        
        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞
        """
        if not self.enabled or self.log_level == "none":
            return
            
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_message(record)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self._message_queue.append({
                'message': message,
                'timestamp': datetime.now(timezone.utc),
                'level': record.levelname
            })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if not self._sending:
                asyncio.create_task(self._process_queue())
                
        except Exception as e:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            print(f"Error in TelegramLoggerHandler.emit: {e}")
    
    def _format_message(self, record: logging.LogRecord) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥-–∑–∞–ø–∏—Å–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        level_icons = {
            'DEBUG': 'üîç',
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CRITICAL': 'üö®'
        }
        
        icon = level_icons.get(record.levelname, 'üìù')
        
        # –í—Ä–µ–º—è –≤ UTC+3 (Moscow)
        moscow_tz = timezone(timedelta(hours=3))
        log_time = datetime.fromtimestamp(record.created, tz=moscow_tz)
        time_str = log_time.strftime('%d.%m.%Y %H:%M:%S')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        message = record.getMessage()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SIGTERM –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "Received SIGTERM signal" in message or "Received SIGINT signal" in message:
            return (
                f"üõë <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</b> | {time_str}\n\n"
                f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."
            )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if "signal_stop_polling" in record.funcName and "signal" in message.lower():
            return (
                f"üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling</b> | {time_str}\n\n"
                f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞\n"
                f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É –æ—Ç —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"{icon} <b>{record.levelname}</b> | {time_str}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
        module_info = f"üìÅ <b>–ú–æ–¥—É–ª—å:</b> {record.pathname}\n"
        module_info += f"üîß <b>–§—É–Ω–∫—Ü–∏—è:</b> {record.funcName} (—Å—Ç—Ä–æ–∫–∞ {record.lineno})\n"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}\n"
        
        # Traceback –¥–ª—è –æ—à–∏–±–æ–∫
        traceback_text = ""
        if record.exc_info:
            traceback_text = "\nüìã <b>Traceback:</b>\n"
            traceback_text += f"<pre>{traceback.format_exception(*record.exc_info)}</pre>"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        full_message = header + module_info + message_text + traceback_text
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(full_message) > self.MAX_MESSAGE_LENGTH:
            # –û–±—Ä–µ–∑–∞–µ–º traceback –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            max_traceback_length = self.MAX_MESSAGE_LENGTH - len(header + module_info + message_text + "\nüìã <b>Traceback:</b>\n<pre>...")
            if traceback_text:
                traceback_text = f"\nüìã <b>Traceback:</b>\n<pre>{traceback.format_exception(*record.exc_info)[:max_traceback_length]}...</pre>"
                full_message = header + module_info + message_text + traceback_text
        
        return full_message
    
    async def _process_queue(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self._sending:
            return
            
        self._sending = True
        
        try:
            while self._message_queue:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
                await self._check_rate_limits()
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                grouped_messages = self._group_messages()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                for message in grouped_messages:
                    await self._send_message(message)
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                await asyncio.sleep(0.1)
                
        finally:
            self._sending = False
    
    def _group_messages(self) -> List[str]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not self._message_queue:
            return []
        
        current_time = datetime.now(timezone.utc)
        grouped = []
        current_group = []
        
        while self._message_queue:
            item = self._message_queue.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤ —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            time_diff = (current_time - item['timestamp']).total_seconds()
            
            if time_diff <= self._grouping_window and len(current_group) < self._max_logs_per_group:
                current_group.append(item)
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_group:
                    grouped.append(self._format_grouped_message(current_group))
                current_group = [item]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        if current_group:
            grouped.append(self._format_grouped_message(current_group))
        
        return grouped
    
    def _format_grouped_message(self, logs: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ª–æ–≥–æ–≤ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            logs: –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if len(logs) == 1:
            return logs[0]['message']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        header = f"üì¶ <b>–ì—Ä—É–ø–ø–∞ –ª–æ–≥–æ–≤ ({len(logs)} –∑–∞–ø–∏—Å–µ–π)</b>\n"
        header += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {logs[0]['timestamp'].strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_counts = {}
        for log in logs:
            level = log['level']
            level_counts[level] = level_counts.get(level, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        for level, count in sorted(level_counts.items()):
            stats += f"  ‚Ä¢ {level}: {count}\n"
        stats += "\n"
        
        # –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)
        logs_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n"
        for i, log in enumerate(logs[:5], 1):
            logs_text += f"<b>{i}.</b> {log['message'][:500]}...\n\n"
        
        if len(logs) > 5:
            logs_text += f"<i>... –∏ –µ—â–µ {len(logs) - 5} –ª–æ–≥–æ–≤</i>"
        
        return header + stats + logs_text
    
    async def _check_rate_limits(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ rate limits Telegram API
        
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        """
        current_time = datetime.now(timezone.utc)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        while self._message_timestamps and (current_time - self._message_timestamps[0]).total_seconds() > 60:
            self._message_timestamps.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –º–∏–Ω—É—Ç—É
        if len(self._message_timestamps) >= self.MAX_MESSAGES_PER_MINUTE:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ
            wait_time = 60 - (current_time - self._message_timestamps[0]).total_seconds()
            if wait_time > 0:
                await asyncio.sleep(wait_time)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                current_time = datetime.now(timezone.utc)
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏
                while self._message_timestamps and (current_time - self._message_timestamps[0]).total_seconds() > 60:
                    self._message_timestamps.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–∫—É–Ω–¥—É
        recent_messages = [ts for ts in self._message_timestamps if (current_time - ts).total_seconds() <= 1]
        if len(recent_messages) >= self.MAX_MESSAGES_PER_SECOND:
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(1)
    
    async def _send_message(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.bot_token or not self.admin_chat_id:
            return
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            payload = {
                'chat_id': self.admin_chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        self._message_timestamps.append(datetime.now(timezone.utc))
                        self._total_sent += 1
                        self._last_send_time = datetime.now(timezone.utc)
                    else:
                        self._total_dropped += 1
                        print(f"Failed to send message to Telegram: {response.status}")
                        
        except asyncio.TimeoutError:
            self._total_dropped += 1
            print("Timeout while sending message to Telegram")
        except Exception as e:
            self._total_dropped += 1
            print(f"Error sending message to Telegram: {e}")
    
    async def send_test_message(self, message: str = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –¢–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.enabled:
            return {"success": False, "message": "–ë–æ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω"}
        
        try:
            await self._send_message(message)
            return {"success": True, "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"}
    
    def get_stats(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'enabled': self.enabled,
            'log_level': self.log_level,
            'total_sent': self._total_sent,
            'total_dropped': self._total_dropped,
            'queue_size': len(self._message_queue),
            'last_send_time': self._last_send_time.isoformat() if self._last_send_time else None
        }


def create_telegram_logger_handler(bot_token: str, admin_chat_id: str, log_level: str = "error") -> TelegramLoggerHandler:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram –ª–æ–≥–æ–≤
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (none, error, warning, all)
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
    """
    enabled = bool(bot_token and admin_chat_id and log_level != "none")
    return TelegramLoggerHandler(
        bot_token=bot_token,
        admin_chat_id=admin_chat_id,
        log_level=log_level,
        enabled=enabled
    )
