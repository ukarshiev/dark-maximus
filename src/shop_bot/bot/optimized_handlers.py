# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î
"""

import logging
import asyncio
from typing import Dict, Any, Optional
from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shop_bot.bot import keyboards
from shop_bot.data_manager.async_database import (
    get_user_async, get_all_hosts_async, get_plans_for_host_async,
    register_user_if_not_exists_async, get_setting_async
)
from shop_bot.config import get_profile_text, get_vpn_active_text, VPN_INACTIVE_TEXT, VPN_NO_DATA_TEXT
from shop_bot.utils.performance_monitor import measure_performance

logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
_hosts_cache: Dict[str, Any] = {}
_plans_cache: Dict[int, Any] = {}
_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
_cache_timestamps: Dict[str, float] = {}

async def _is_cache_valid(cache_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    if cache_key not in _cache_timestamps:
        return False
    return (asyncio.get_event_loop().time() - _cache_timestamps[cache_key]) < _cache_ttl

async def _get_cached_hosts() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = "hosts"
    if await _is_cache_valid(cache_key):
        return _hosts_cache.get(cache_key, [])
    
    hosts = await get_all_hosts_async()
    _hosts_cache[cache_key] = hosts
    _cache_timestamps[cache_key] = asyncio.get_event_loop().time()
    return hosts

async def _get_cached_plans(host_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"plans_{host_id}"
    if await _is_cache_valid(cache_key):
        return _plans_cache.get(cache_key, [])
    
    plans = await get_plans_for_host_async(host_id)
    _plans_cache[cache_key] = plans
    _cache_timestamps[cache_key] = asyncio.get_event_loop().time()
    return plans

async def show_main_menu_optimized(message: types.Message, edit_message: bool = False):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        user_id = message.from_user.id
        user_data = await get_user_async(user_id)
        
        if not user_data:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å VPN
        vpn_status_text = VPN_NO_DATA_TEXT
        if user_data.get('key_id'):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
            vpn_status_text = VPN_INACTIVE_TEXT
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = get_profile_text(
            username=user_data.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
            balance=user_data.get('balance', 0.0),
            total_spent=user_data.get('total_spent', 0.0),
            total_months=user_data.get('total_months', 0),
            vpn_status_text=vpn_status_text,
            referral_balance=user_data.get('referral_balance', 0.0),
            show_referral=True,
            referral_link=f"https://t.me/{await get_setting_async('telegram_bot_username')}?start=ref_{user_id}",
            referral_percentage=10
        )
        
        keyboard = keyboards.get_main_inline_keyboard()
        
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"Error in show_main_menu_optimized: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@measure_performance("buy_handler")
async def buy_handler_optimized(message: types.Message):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        hosts = await _get_cached_hosts()
        
        if not hosts:
            await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–∞
        builder = InlineKeyboardBuilder()
        for host in hosts:
            builder.button(
                text=f"üåê {host['host_name']}",
                callback_data=f"host_{host['host_id']}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
        builder.adjust(1)
        
        await message.answer(
            "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in buy_handler_optimized: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@measure_performance("host_selection_handler")
async def host_selection_handler_optimized(callback: types.CallbackQuery, state: FSMContext):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–∞"""
    try:
        host_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è —Ö–æ—Å—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        plans = await _get_cached_plans(host_id)
        
        if not plans:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        builder = InlineKeyboardBuilder()
        for plan in plans:
            price_text = f"{plan['price']:.2f} RUB"
            if plan.get('days', 0) > 0:
                days_text = f"{plan['days']} –¥–Ω."
            else:
                days_text = f"{plan.get('hours', 0)} —á."
            
            builder.button(
                text=f"üì¶ {plan['plan_name']} - {price_text} ({days_text})",
                callback_data=f"plan_{plan['plan_id']}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="buy_new_vpn")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in host_selection_handler_optimized: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤.")

@measure_performance("profile_handler")
async def profile_handler_optimized(message: types.Message):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user_id = message.from_user.id
        user_data = await get_user_async(user_id)
        
        if not user_data:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å VPN
        vpn_status_text = VPN_NO_DATA_TEXT
        if user_data.get('key_id'):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
            vpn_status_text = VPN_INACTIVE_TEXT
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = get_profile_text(
            username=user_data.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
            balance=user_data.get('balance', 0.0),
            total_spent=user_data.get('total_spent', 0.0),
            total_months=user_data.get('total_months', 0),
            vpn_status_text=vpn_status_text,
            referral_balance=user_data.get('referral_balance', 0.0),
            show_referral=True,
            referral_link=f"https://t.me/{await get_setting_async('telegram_bot_username')}?start=ref_{user_id}",
            referral_percentage=10
        )
        
        keyboard = keyboards.get_profile_keyboard()
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in profile_handler_optimized: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@measure_performance("start_handler")
async def start_handler_optimized(message: types.Message, state: FSMContext, command):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        referrer_id = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if command.args and command.args.startswith('ref_'):
            try:
                potential_referrer_id = int(command.args.split('_')[1])
                if potential_referrer_id != user_id:
                    referrer_id = potential_referrer_id
                    logger.info(f"New user {user_id} was referred by {referrer_id}")
            except (IndexError, ValueError):
                logger.warning(f"Invalid referral code received: {command.args}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await register_user_if_not_exists_async(
            user_id, username, referrer_id, message.from_user.full_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_async(user_id)
        
        if not user_data:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        if not user_data.get('agreed_to_documents'):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–≥–ª–∞—Å–∏—è
            from shop_bot.data_manager.database import get_global_domain
            domain = get_global_domain()
            
            terms_url = None
            privacy_url = None
            if domain and not domain.startswith("http://localhost") and not domain.startswith("https://localhost"):
                terms_url = f"{domain.rstrip('/')}/terms"
                privacy_url = f"{domain.rstrip('/')}/privacy"
            
            if terms_url and privacy_url:
                keyboard = keyboards.get_terms_agreement_keyboard(terms_url, privacy_url)
                await message.answer(
                    "üìã <b>–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏</b>\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        force_subscription = await get_setting_async("force_subscription")
        channel_url = await get_setting_async("channel_url")
        
        if force_subscription == "true" and channel_url:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        is_admin = str(user_id) == await get_setting_async("admin_telegram_id")
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!",
            reply_markup=keyboards.get_main_reply_keyboard(is_admin)
        )
        await show_main_menu_optimized(message)
        
    except Exception as e:
        logger.error(f"Error in start_handler_optimized: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    global _hosts_cache, _plans_cache, _cache_timestamps
    _hosts_cache.clear()
    _plans_cache.clear()
    _cache_timestamps.clear()
    logger.info("Cache cleared")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
def get_cache_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
    return {
        "hosts_cache_size": len(_hosts_cache),
        "plans_cache_size": len(_plans_cache),
        "cache_timestamps_size": len(_cache_timestamps),
        "cache_ttl": _cache_ttl
    }
