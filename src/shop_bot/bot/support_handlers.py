# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""

import logging
import json

from aiogram import Bot, Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.types import ErrorEvent
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shop_bot.data_manager import database
from shop_bot.bot.handlers import process_successful_onboarding

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
class Onboarding(StatesGroup):
    waiting_for_terms_agreement = State()
    waiting_for_subscription = State()

async def show_terms_agreement_screen(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å–æ–≥–ª–∞—Å–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    from shop_bot.data_manager.database import get_global_domain
    domain = get_global_domain()
    
    terms_url = None
    privacy_url = None
    if domain and not domain.startswith("http://localhost") and not domain.startswith("https://localhost"):
        terms_url = f"{domain.rstrip('/')}/terms"
        privacy_url = f"{domain.rstrip('/')}/privacy"
    
    if not terms_url or not privacy_url:
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await show_subscription_screen(message, state)
        return
    
    text = (
        "<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–∏–∂–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –∏—Ö:\n\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    if terms_url:
        builder.button(text="üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", web_app={"url": terms_url})
    if privacy_url:
        builder.button(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", web_app={"url": privacy_url})
    builder.button(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="agree_to_terms")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(Onboarding.waiting_for_terms_agreement)

async def show_subscription_screen(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    channel_url = database.get_setting("channel_url")
    is_subscription_forced = database.get_setting("force_subscription") == "true"
    
    if not is_subscription_forced or not channel_url:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await process_successful_onboarding(message, state)
        return
    
    text = (
        "<b>üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)
    builder.button(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription_and_agree")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(Onboarding.waiting_for_subscription)

# –§—É–Ω–∫—Ü–∏—è process_successful_onboarding –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handlers.py

async def get_user_summary(user_id: int, username: str) -> str:
    keys = database.get_user_keys(user_id)
    latest_transaction = database.get_latest_transaction(user_id)

    summary_parts = [
        f"<b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username} (ID: <code>{user_id}</code>)\n"
    ]

    if keys:
        summary_parts.append("<b>üîë –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:</b>")
        for key in keys:
            expiry = key['expiry_date'].split(' ')[0]
            summary_parts.append(f"- <code>{key['key_email']}</code> (–¥–æ {expiry} –Ω–∞ —Ö–æ—Å—Ç–µ {key['host_name']})")
    else:
        summary_parts.append("<b>üîë –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:</b> –ù–µ—Ç")

    if latest_transaction:
        summary_parts.append("\n<b>üí∏ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b>")
        metadata = json.loads(latest_transaction.get('metadata', '{}'))
        plan_name = metadata.get('plan_name', 'N/A')
        price = latest_transaction.get('amount_rub', 'N/A')
        date = latest_transaction.get('created_date', '').split(' ')[0]
        summary_parts.append(f"- {plan_name} –∑–∞ {price} RUB ({date})")
    else:
        summary_parts.append("\n<b>üí∏ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> –ù–µ—Ç")

    return "\n".join(summary_parts)
def get_support_router() -> Router:
    support_router = Router()
    
    @support_router.message(Command("check_test"))
    async def check_test_command(message: types.Message, bot: Bot):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º"""
        user_id = message.from_user.id
        is_admin = str(user_id) == database.get_setting("admin_telegram_id")
        
        if not is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            support_group_id = database.get_setting("support_group_id")
            support_bot_token = database.get_setting("support_bot_token")
            
            test_info = f"üß™ <b>–¢–µ—Å—Ç –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
            test_info += f"üìã Support Group ID: {support_group_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
            test_info += f"üîë Support Bot Token: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if support_bot_token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
            
            if not support_group_id:
                test_info += "‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            elif not support_bot_token:
                test_info += "‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã
                try:
                    chat_info = await bot.get_chat(support_group_id)
                    test_info += f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞:</b> {chat_info.title}\n"
                    test_info += f"üìä <b>–¢–∏–ø –≥—Ä—É–ø–ø—ã:</b> {chat_info.type}\n"
                    test_info += f"üÜî <b>ID –≥—Ä—É–ø–ø—ã:</b> {chat_info.id}\n"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                    try:
                        bot_member = await bot.get_chat_member(support_group_id, bot.id)
                        test_info += f"üë§ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> {bot_member.status}\n"
                        
                        if bot_member.status in ['administrator', 'creator']:
                            test_info += "‚úÖ <b>–ü—Ä–∞–≤–∞:</b> –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                        else:
                            test_info += "‚ùå <b>–ü—Ä–∞–≤–∞:</b> –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                            test_info += "üí° <b>–†–µ—à–µ–Ω–∏–µ:</b> –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n"
                            
                    except Exception as member_error:
                        test_info += f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:</b> {member_error}\n"
                    
                    test_info += "\nüß™ <b>–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
                    try:
                        await bot.send_message(
                            chat_id=support_group_id,
                            text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                            disable_notification=True
                        )
                        test_info += "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n"
                    except Exception as send_error:
                        test_info += f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}\n"
                        
                except Exception as e:
                    test_info += f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ:</b> {e}\n"
                    test_info += "üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
                    test_info += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –≥—Ä—É–ø–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n"
                    test_info += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n"
                    if "upgraded to a supergroup" in str(e):
                        test_info += "‚Ä¢ <b>–í–ê–ñ–ù–û:</b> –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É!\n"
                        test_info += "‚Ä¢ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ–º Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É\n"
                        test_info += "‚Ä¢ –ù–æ–≤—ã–π ID –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100 (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1002919676196)\n"
                        test_info += "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                    else:
                        test_info += "‚Ä¢ –ì—Ä—É–ø–ø–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É\n"
            
            await message.answer(test_info, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error in check_test command: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")

    @support_router.message(Command("check_config"))
    async def check_config_command(message: types.Message, bot: Bot):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        user_id = message.from_user.id
        is_admin = str(user_id) == database.get_setting("admin_telegram_id")
        
        if not is_admin:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            support_group_id = database.get_setting("support_group_id")
            support_bot_token = database.get_setting("support_bot_token")
            
            config_info = f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
            config_info += f"üìã Support Group ID: {support_group_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
            config_info += f"üîë Support Bot Token: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' if support_bot_token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
            
            if not support_group_id:
                config_info += "‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            elif not support_bot_token:
                config_info += "‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
                try:
                    chat_info = await bot.get_chat(support_group_id)
                    config_info += f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞:</b> {chat_info.title}\n"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–µ–º—ã
                    try:
                        test_topic = await bot.create_forum_topic(chat_id=support_group_id, name="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        await bot.delete_forum_topic(chat_id=support_group_id, message_thread_id=test_topic.message_thread_id)
                        config_info += f"üìä <b>–¢–∏–ø:</b> –¢–µ–º—ã –≤–∫–ª—é—á–µ–Ω—ã\n"
                        config_info += "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
                    except Exception as forum_error:
                        config_info += f"üìä <b>–¢–∏–ø:</b> –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞\n"
                        config_info += "‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–µ–º—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ!\n"
                        config_info += "üí° <b>–†–µ—à–µ–Ω–∏–µ:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é '–¢–µ–º—ã' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã\n"
                        
                except Exception as e:
                    config_info += f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ:</b> {e}\n"
                    if "upgraded to a supergroup" in str(e):
                        config_info += "üí° <b>–í–ê–ñ–ù–û:</b> –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É!\n"
                        config_info += "‚Ä¢ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ–º Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É\n"
                        config_info += "‚Ä¢ –ù–æ–≤—ã–π ID –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100 (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1002919676196)\n"
                        config_info += "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
                    else:
                        config_info += "üí° <b>–†–µ—à–µ–Ω–∏–µ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            
            await message.answer(config_info, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"Error checking support bot config: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    @support_router.message(CommandStart())
    async def handle_start(message: types.Message, bot: Bot):
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        
        print(f"DEBUG: SUPPORT BOT START HANDLER CALLED for user {user_id} ({username})")
        logger.info(f"SUPPORT BOT START HANDLER: User {user_id} ({username}) started support bot")
        
        thread_id = database.get_support_thread_id(user_id)
        
        if not thread_id:
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            support_group_id = database.get_setting("support_group_id")
            if not support_group_id:
                logger.error("Support bot: support_group_id is not configured!")
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤ –Ω–µ–π –≤–∫–ª—é—á–µ–Ω—ã —Ç–µ–º—ã
                try:
                    chat_info = await bot.get_chat(support_group_id)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–µ–º—ã
                    try:
                        test_topic = await bot.create_forum_topic(chat_id=support_group_id, name="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        await bot.delete_forum_topic(chat_id=support_group_id, message_thread_id=test_topic.message_thread_id)
                    except Exception as forum_error:
                        logger.error(f"Support group {support_group_id} topics are not enabled: {forum_error}")
                        await message.answer("‚ùå –¢–µ–º—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                        return
                except Exception as chat_error:
                    logger.error(f"Support group {support_group_id} not found or inaccessible: {chat_error}")
                    if "upgraded to a supergroup" in str(chat_error):
                        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã.")
                    else:
                        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    return
                
                thread_name = f"–¢–∏–∫–µ—Ç –æ—Ç @{username} ({user_id})"
                new_thread = await bot.create_forum_topic(chat_id=support_group_id, name=thread_name)
                thread_id = new_thread.message_thread_id
                
                database.add_support_thread(user_id, thread_id)
                
                summary_text = await get_user_summary(user_id, username)
                await bot.send_message(
                    chat_id=support_group_id,
                    message_thread_id=thread_id,
                    text=summary_text,
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"Created new support thread {thread_id} for user {user_id}")
                
            except Exception as e:
                logger.error(f"Failed to create support thread for user {user_id}: {e}", exc_info=True)
                if "chat not found" in str(e).lower():
                    await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                elif "upgraded to a supergroup" in str(e).lower():
                    await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∞ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã.")
                elif "not a forum" in str(e).lower() or "topics" in str(e).lower():
                    await message.answer("‚ùå –¢–µ–º—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")

    @support_router.message(F.chat.type == "private")
    async def from_user_to_admin(message: types.Message, bot: Bot):
        user_id = message.from_user.id
        text = message.text or "NO_TEXT"
        
        print(f"DEBUG: SUPPORT BOT PRIVATE MESSAGE HANDLER for user {user_id}, text: '{text}'")
        
        thread_id = database.get_support_thread_id(user_id)
        support_group_id = database.get_setting("support_group_id")
        
        if thread_id and support_group_id:
            await bot.copy_message(
                chat_id=support_group_id,
                from_chat_id=user_id,
                message_id=message.message_id,
                message_thread_id=thread_id
            )
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")

    @support_router.message(F.message_thread_id)
    async def from_admin_to_user(message: types.Message, bot: Bot):
        thread_id = message.message_thread_id
        user_id = database.get_user_id_by_thread(thread_id)
        
        if message.from_user.id == bot.id:
            return
            
        if user_id:
            support_group_id = database.get_setting("support_group_id")
            if support_group_id:
                try:
                    await bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=support_group_id,
                        message_id=message.message_id
                    )
                except Exception as e:
                    logger.error(f"Failed to send message from thread {thread_id} to user {user_id}: {e}")
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
    
    @support_router.error()
    async def support_router_error_handler(event: ErrorEvent):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è support_router"""
        logger.critical(
            "Critical error in support router caused by %s", 
            event.exception, 
            exc_info=True
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø update –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        update = event.update
        user_id = None
        
        try:
            if update.message:
                user_id = update.message.from_user.id
                await update.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            elif update.callback_query:
                user_id = update.callback_query.from_user.id
                await update.callback_query.answer(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
        except Exception as notification_error:
            logger.error(f"Failed to send error notification to user {user_id}: {notification_error}")
    
    return support_router