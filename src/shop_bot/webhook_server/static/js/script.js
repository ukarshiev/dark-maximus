document.addEventListener('DOMContentLoaded', function () {
	function initializePasswordToggles() {
		const togglePasswordButtons = document.querySelectorAll('.toggle-password')
		togglePasswordButtons.forEach(button => {
			button.addEventListener('click', function () {
				const parent =
					this.closest('.form-group') || this.closest('.password-wrapper')
				if (!parent) return

				const passwordInput = parent.querySelector('input')
				if (!passwordInput) return

				if (passwordInput.type === 'password') {
					passwordInput.type = 'text'
					this.textContent = 'üôà'
				} else {
					passwordInput.type = 'password'
					this.textContent = 'üëÅÔ∏è'
				}
			})
		})
	}

	function setupBotControlForms() {
		const controlForms = document.querySelectorAll(
			'form[action*="start-bot"], form[action*="stop-bot"]'
		)

		controlForms.forEach(form => {
			form.addEventListener('submit', function () {
				const button = form.querySelector('button[type="submit"]')
				if (button) {
					button.disabled = true
					if (form.action.includes('start')) {
						button.textContent = '–ó–∞–ø—É—Å–∫–∞–µ–º...'
					} else if (form.action.includes('stop')) {
						button.textContent = '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...'
					}
				}
				setTimeout(function () {
					window.location.reload()
				}, 1000) // 1 second
			})
		})
	}

	function setupConfirmationForms() {
		const confirmationForms = document.querySelectorAll('form[data-confirm]')
		confirmationForms.forEach(form => {
			form.addEventListener('submit', function (event) {
				const message = form.getAttribute('data-confirm')
				if (!confirm(message)) {
					event.preventDefault()
				}
			})
		})
	}

	function initializeDashboardCharts() {
		const usersChartCanvas = document.getElementById('newUsersChart')
		if (!usersChartCanvas || typeof CHART_DATA === 'undefined') {
			return
		}

		function prepareChartData(data, label, color) {
			const labels = []
			const values = []
			const today = new Date()

			for (let i = 29; i >= 0; i--) {
				const date = new Date(today)
				date.setDate(today.getDate() - i)
				const dateString = date.toISOString().split('T')[0]
				const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(
					date.getMonth() + 1
				)
					.toString()
					.padStart(2, '0')}`
				labels.push(formattedDate)
				values.push(data[dateString] || 0)
			}

			return {
				labels: labels,
				datasets: [
					{
						label: label,
						data: values,
						borderColor: color,
						backgroundColor: color + '33',
						borderWidth: 2,
						fill: true,
						tension: 0.3,
					},
				],
			}
		}

		function updateChartFontsAndLabels(chart) {
			const isMobile = window.innerWidth <= 768
			const isVerySmall = window.innerWidth <= 470
			chart.options.scales.x.ticks.font.size = isMobile ? 10 : 12
			chart.options.scales.y.ticks.font.size = isMobile ? 10 : 12
			chart.options.plugins.legend.labels.font.size = isMobile ? 12 : 14
			chart.options.scales.x.ticks.maxTicksLimit = isMobile ? 8 : 15
			chart.options.scales.x.ticks.display = !isVerySmall
			chart.options.scales.y.ticks.display = !isVerySmall
			chart.options.plugins.legend.display = !isVerySmall
			chart.update()
		}

		const usersCtx = usersChartCanvas.getContext('2d')
		const usersChartData = prepareChartData(
			CHART_DATA.users,
			'–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å',
			'#007bff'
		)
		const usersChart = new Chart(usersCtx, {
			type: 'line',
			data: usersChartData,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							precision: 0,
							font: {
								size: window.innerWidth <= 768 ? 10 : 12,
							},
							display: window.innerWidth > 470,
						},
					},
					x: {
						ticks: {
							font: {
								size: window.innerWidth <= 768 ? 10 : 12,
							},
							maxTicksLimit: window.innerWidth <= 768 ? 8 : 15,
							maxRotation: 45,
							minRotation: 45,
							display: window.innerWidth > 470,
						},
					},
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					autoPadding: true,
					padding: 0,
				},
				plugins: {
					legend: {
						labels: {
							font: {
								size: window.innerWidth <= 768 ? 12 : 14,
							},
							display: window.innerWidth > 470,
						},
					},
				},
			},
		})

		const keysChartCanvas = document.getElementById('newKeysChart')
		if (!keysChartCanvas) return

		const keysCtx = keysChartCanvas.getContext('2d')
		const keysChartData = prepareChartData(
			CHART_DATA.keys,
			'–ù–æ–≤—ã—Ö –∫–ª—é—á–µ–π –≤ –¥–µ–Ω—å',
			'#28a745'
		)
		const keysChart = new Chart(keysCtx, {
			type: 'line',
			data: keysChartData,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							precision: 0,
							font: {
								size: window.innerWidth <= 768 ? 10 : 12,
							},
							display: window.innerWidth > 470,
						},
					},
					x: {
						ticks: {
							font: {
								size: window.innerWidth <= 768 ? 10 : 12,
							},
							maxTicksLimit: window.innerWidth <= 768 ? 8 : 15,
							maxRotation: 45,
							minRotation: 45,
							display: window.innerWidth > 470,
						},
					},
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					autoPadding: true,
					padding: 0,
				},
				plugins: {
					legend: {
						labels: {
							font: {
								size: window.innerWidth <= 768 ? 12 : 14,
							},
							display: window.innerWidth > 470,
						},
					},
				},
			},
		})

		window.addEventListener('resize', () => {
			updateChartFontsAndLabels(usersChart)
			updateChartFontsAndLabels(keysChart)
		})
	}

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤—ã–º –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
	function initializeSidebar() {
		const burgerMenu = document.getElementById('burgerMenu');
		const sidebar = document.getElementById('sidebar');
		
		if (!burgerMenu || !sidebar) return;
		
		// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
		function toggleSidebar() {
			// –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
			if (window.innerWidth <= 768) {
				sidebar.classList.toggle('sidebar-open');
				burgerMenu.classList.toggle('burger-active');
				
				// –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é
				if (sidebar.classList.contains('sidebar-open')) {
					document.body.style.overflow = 'hidden';
				} else {
					document.body.style.overflow = '';
				}
			}
		}
		
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –±—É—Ä–≥–µ—Ä–Ω–æ–≥–æ –º–µ–Ω—é
		burgerMenu.addEventListener('click', toggleSidebar);
		
		// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay (—Ç–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω—ã–µ)
		document.addEventListener('click', function(e) {
			if (window.innerWidth <= 768 && 
				sidebar.classList.contains('sidebar-open') && 
				!sidebar.contains(e.target) && 
				!burgerMenu.contains(e.target)) {
				sidebar.classList.remove('sidebar-open');
				burgerMenu.classList.remove('burger-active');
				document.body.style.overflow = '';
			}
		});
		
		// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
		window.addEventListener('resize', function() {
			if (window.innerWidth > 768) {
				// –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞
				sidebar.classList.remove('sidebar-open');
				burgerMenu.classList.remove('burger-active');
				document.body.style.overflow = '';
			}
		});
	}

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞–º–∏ –±–æ—Ç–æ–≤
	function initializeBotToggles() {
		const botCheckboxes = document.querySelectorAll('.bot-checkbox');
		
		botCheckboxes.forEach(checkbox => {
			checkbox.addEventListener('change', function() {
				const botType = this.getAttribute('data-bot');
				const statusText = this.closest('.bot-label-row').querySelector('.bot-status-text');
				const isChecked = this.checked;
				
				// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
				if (isChecked) {
					statusText.textContent = '–ó–∞–ø—É—â–µ–Ω';
					statusText.className = 'bot-status-text status-running';
				} else {
					statusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
					statusText.className = 'bot-status-text status-stopped';
				}
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
				const action = isChecked ? 'start' : 'stop';
				const url = `/${action}-${botType}-bot`;  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª /admin/
				
				fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded',
					}
				})
				.then(response => {
					if (!response.ok) {
						// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
						this.checked = !isChecked;
						if (isChecked) {
							statusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
							statusText.className = 'bot-status-text status-stopped';
						} else {
							statusText.textContent = '–ó–∞–ø—É—â–µ–Ω';
							statusText.className = 'bot-status-text status-running';
						}
					}
				})
				.catch(error => {
					console.error('Error:', error);
					// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
					this.checked = !isChecked;
					if (isChecked) {
						statusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
						statusText.className = 'bot-status-text status-stopped';
					} else {
						statusText.textContent = '–ó–∞–ø—É—â–µ–Ω';
						statusText.className = 'bot-status-text status-running';
					}
				});
			});
		});
	}

	initializePasswordToggles()
	setupBotControlForms()
	setupConfirmationForms()
	initializeDashboardCharts()
	initializeSidebar()
	initializeBotToggles()
	initializeUserModal()
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	loadAllUsersEarned()
})

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let currentUserId = null

function initializeUserModal() {
	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
	window.onclick = function(event) {
		const modal = document.getElementById('userModal')
		if (event.target === modal) {
			closeUserModal()
		}
	}
}

function openUserModal(userId, username, isBanned, keysCount) {
	currentUserId = userId
	
	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	document.getElementById('modalUserId').textContent = userId
	document.getElementById('modalUsername').textContent = username === 'N/A' ? 'N/A' : '@' + username
	document.getElementById('modalStatus').innerHTML = isBanned ? 
		'<span class="status-badge status-banned">–ó–∞–±–∞–Ω–µ–Ω</span>' : 
		'<span class="status-badge status-active">–ê–∫—Ç–∏–≤–µ–Ω</span>'
	document.getElementById('modalKeys').textContent = keysCount + ' —à—Ç.'
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
	const banButton = document.getElementById('banButton')
	const unbanButton = document.getElementById('unbanButton')
	
	if (isBanned) {
		banButton.style.display = 'none'
		unbanButton.style.display = 'inline-block'
	} else {
		banButton.style.display = 'inline-block'
		unbanButton.style.display = 'none'
	}
	
	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
	switchTab('payments')
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
	loadUserPayments(userId)
	loadUserKeys(userId)
	loadUserEarned(userId)
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
	document.getElementById('userModal').style.display = 'block'
}

function closeUserModal() {
	document.getElementById('userModal').style.display = 'none'
	currentUserId = null
}

function banUser() {
	if (currentUserId && confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –û–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.')) {
		// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
		const form = document.createElement('form')
		form.method = 'POST'
		form.action = `/ban-user/${currentUserId}`
		
		document.body.appendChild(form)
		form.submit()
	}
}

function unbanUser() {
	if (currentUserId && confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
		// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
		const form = document.createElement('form')
		form.method = 'POST'
		form.action = `/unban-user/${currentUserId}`
		
		document.body.appendChild(form)
		form.submit()
	}
}

function revokeKeys() {
	if (currentUserId && confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–æ–≤. –í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
		// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
		const form = document.createElement('form')
		form.method = 'POST'
		form.action = `/revoke-keys/${currentUserId}`
		
		document.body.appendChild(form)
		form.submit()
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
function switchTab(tabName) {
	// –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
	const tabs = document.querySelectorAll('.tab-content')
	tabs.forEach(tab => tab.classList.remove('active'))
	
	// –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
	const buttons = document.querySelectorAll('.tab-button')
	buttons.forEach(button => button.classList.remove('active'))
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
	document.getElementById(`tab-${tabName}`).classList.add('active')
	
	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
	event.target.classList.add('active')
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadUserPayments(userId) {
	try {
		const response = await fetch(`/api/user-payments/${userId}`)
		const data = await response.json()
		
		const tbody = document.getElementById('modalPaymentsTable')
		tbody.innerHTML = ''
		
		if (data.payments && data.payments.length > 0) {
			data.payments.forEach(payment => {
				const row = document.createElement('tr')
				row.innerHTML = `
					<td>${payment.transaction_id}</td>
					<td>${payment.host_name || 'N/A'}</td>
					<td>${payment.plan_name || 'N/A'}</td>
					<td>${payment.amount_rub ? payment.amount_rub.toFixed(2) + ' RUB' : 'N/A'}</td>
					<td>
						<span class="status-badge ${payment.status === 'paid' ? 'status-active' : 'status-pending'}">
							${payment.status === 'paid' ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç'}
						</span>
					</td>
					<td>${payment.created_date ? new Date(payment.created_date).toLocaleString('ru-RU') : 'N/A'}</td>
				`
				tbody.appendChild(row)
			})
		} else {
			tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #999;">–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π</td></tr>'
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error)
		document.getElementById('modalPaymentsTable').innerHTML = '<tr><td colspan="6" style="text-align: center; color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>'
	}
}

async function loadUserKeys(userId) {
	try {
		const response = await fetch(`/api/user-keys/${userId}`)
		const data = await response.json()
		
		const tbody = document.getElementById('modalKeysTable')
		tbody.innerHTML = ''
		
		if (data.keys && data.keys.length > 0) {
			data.keys.forEach(key => {
				const row = document.createElement('tr')
				row.innerHTML = `
					<td>${key.key_id}</td>
					<td>${key.host_name || 'N/A'}</td>
					<td>${key.plan_name || 'N/A'}</td>
					<td>${key.price ? key.price + ' RUB' : 'N/A'}</td>
					<td>
						${key.connection_string ? 
							`<div class="key-cell">
								<span class="key-text" title="${key.connection_string}">${key.connection_string.substring(0, 30)}...</span>
								<button class="copy-btn" onclick="copyKey('${key.connection_string}')" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á">üìã</button>
							</div>` : 
							'-'
						}
					</td>
					<td>${key.created_date ? new Date(key.created_date).toLocaleString('ru-RU') : 'N/A'}</td>
				`
				tbody.appendChild(row)
			})
		} else {
			tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #999;">–ù–µ—Ç –∫–ª—é—á–µ–π</td></tr>'
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π:', error)
		document.getElementById('modalKeysTable').innerHTML = '<tr><td colspan="6" style="text-align: center; color: #dc3545;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>'
	}
}

function copyUsername() {
	const usernameElement = document.getElementById('modalUsername')
	if (usernameElement) {
		const username = usernameElement.textContent
		// –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
		const cleanUsername = username.startsWith('@') ? username : '@' + username
		
		navigator.clipboard.writeText(cleanUsername).then(() => {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			showNotification('Username —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + cleanUsername)
		}).catch(err => {
			console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err)
			showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error')
		})
	}
}

function openTelegramProfile() {
	const usernameElement = document.getElementById('modalUsername')
	if (usernameElement) {
		const username = usernameElement.textContent
		// –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
		const cleanUsername = username.startsWith('@') ? username.substring(1) : username
		
		if (cleanUsername === 'N/A') {
			showNotification('Username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error')
			return
		}
		
		const telegramUrl = 'https://t.me/' + cleanUsername
		window.open(telegramUrl, '_blank')
	}
}

function showNotification(message, type = 'success') {
	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	const notification = document.createElement('div')
	notification.style.cssText = `
		position: fixed;
		top: 20px;
		right: 20px;
		background: ${type === 'error' ? '#dc3545' : '#28a745'};
		color: white;
		padding: 12px 20px;
		border-radius: 4px;
		z-index: 10000;
		font-size: 14px;
		box-shadow: 0 4px 6px rgba(0,0,0,0.1);
	`
	notification.textContent = message
	
	document.body.appendChild(notification)
	
	// –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
	setTimeout(() => {
		if (notification.parentNode) {
			notification.parentNode.removeChild(notification)
		}
	}, 3000)
}

async function loadUserEarned(userId) {
	try {
		const response = await fetch(`/api/user-earned/${userId}`)
		const data = await response.json()
		
		const earnedElement = document.getElementById('modalEarned')
		if (earnedElement) {
			earnedElement.textContent = data.earned ? data.earned.toFixed(2) + ' RUB' : '0.00 RUB'
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—É–º–º—ã:', error)
		const earnedElement = document.getElementById('modalEarned')
		if (earnedElement) {
			earnedElement.textContent = '–û—à–∏–±–∫–∞'
		}
	}
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadAllUsersEarned() {
    const earnedElements = document.querySelectorAll('.user-earned');
    
    for (const element of earnedElements) {
        const userId = element.getAttribute('data-user-id');
        try {
            const response = await fetch(`/api/user-earned/${userId}`);
            const data = await response.json();
            
            if (data.earned !== undefined) {
                element.textContent = data.earned.toFixed(2) + ' RUB';
            } else {
                element.textContent = '0.00 RUB';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', error);
            element.textContent = '–û—à–∏–±–∫–∞';
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function openTelegramProfileFromTable(username) {
    if (username === 'N/A') {
        showNotification('Username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanUsername = username.startsWith('@') ? username.substring(1) : username;
    const telegramUrl = 'https://t.me/' + cleanUsername;
    window.open(telegramUrl, '_blank');
}

function copyUsernameFromTable(username) {
    if (username === 'N/A') {
        showNotification('Username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    const cleanUsername = username.startsWith('@') ? username : '@' + username;
    
    navigator.clipboard.writeText(cleanUsername).then(() => {
        showNotification('Username —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + cleanUsername);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
}