# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞
"""

CHOOSE_PLAN_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
CHOOSE_PAYMENT_METHOD_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
HOWTO_CHOOSE_OS_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:"
VPN_INACTIVE_TEXT = "‚ùå <b>–°—Ç–∞—Ç—É—Å VPN:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω (—Å—Ä–æ–∫ –∏—Å—Ç–µ–∫)"
VPN_NO_DATA_TEXT = "‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å VPN:</b> –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
VIDEO_INSTRUCTIONS_ENABLED = True
VIDEO_INSTRUCTIONS_DIR = "video_instructions"

def get_profile_text(username, balance, total_spent, total_months, vpn_status_text):
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {username}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f} RUB\n\n"
        f"üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {total_spent:.0f} RUB\n"
        f"üìÖ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤:</b> {total_months}\n\n"
        f"{vpn_status_text}"
    )

def get_vpn_active_text(days_left, hours_left):
    return (
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å VPN:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {days_left} –¥. {hours_left} —á."
    )

def get_key_info_text(key_number, expiry_date, created_date, connection_string):
    expiry_formatted = expiry_date.strftime('%d.%m.%Y –≤ %H:%M')
    created_formatted = created_date.strftime('%d.%m.%Y –≤ %H:%M')
    
    return (
        f"<b>üîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ #{key_number}</b>\n\n"
        f"<b>‚ûï –ü—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω:</b> {created_formatted}\n"
        f"<b>‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {expiry_formatted}\n\n"

        f"                    ‚¨áÔ∏è <b>–ù–ò–ñ–ï –í–ê–® –ö–õ–Æ–ß</b> ‚¨áÔ∏è\n"
        f"------------------------------------------------------------------------\n"
        f"<code>{connection_string}</code>\n"
        f"------------------------------------------------------------------------\n"
        f"üí°<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>\n\n"

        f"<blockquote>‚ÅâÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</blockquote>\n"
        f"<blockquote>üì¢ –í–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</blockquote>\n"
        f"<blockquote>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è]</blockquote>"
    )

def get_purchase_success_text(action: str, key_number: int, expiry_date, connection_string: str):
    action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω" if action == "extend" else "–≥–æ—Ç–æ–≤"
    expiry_formatted = expiry_date.strftime('%d.%m.%Y –≤ %H:%M')

    return (
        f"üéâ <b>–í–∞—à –∫–ª—é—á #{key_number} {action_text}!</b>\n\n"
        f"‚è≥ <b>–û–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ:</b> {expiry_formatted}\n\n"
        f"                    ‚¨áÔ∏è <b>–ù–ò–ñ–ï –í–ê–® –ö–õ–Æ–ß</b> ‚¨áÔ∏è\n"
        f"------------------------------------------------------------------------\n"
        f"<code>{connection_string}</code>\n"
        f"------------------------------------------------------------------------\n"
        f"üí°<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>\n\n"

        f"<blockquote>‚ÅâÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</blockquote>\n"
        f"<blockquote>üì¢ –í–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</blockquote>\n"
        f"<blockquote>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è]</blockquote>"
    )

def get_video_instruction_path(platform: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    video_mapping = {
        'android': 'android_video.mp4',
        'ios': 'ios_video.mp4', 
        'windows': 'windows_video.mp4',
        'macos': 'macos_video.mp4',
        'linux': 'linux_video.mp4',
    }
    return f"{VIDEO_INSTRUCTIONS_DIR}/{video_mapping.get(platform, 'android_video.mp4')}"

def has_video_instruction(platform: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    if not VIDEO_INSTRUCTIONS_ENABLED:
        return False
    
    from pathlib import Path
    video_path = Path(get_video_instruction_path(platform))
    return video_path.exists()