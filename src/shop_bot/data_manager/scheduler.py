# -*- coding: utf-8 -*-
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞
"""

import asyncio
import logging

from datetime import datetime, timedelta, timezone
from decimal import Decimal
import uuid
import json

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot

from shop_bot.bot_controller import BotController
from shop_bot.data_manager import database
from shop_bot.modules import xui_api
from shop_bot.bot import keyboards

CHECK_INTERVAL_SECONDS = 300
NOTIFY_BEFORE_HOURS = {72, 48, 24, 1}
notified_users = {}

logger = logging.getLogger(__name__)

def format_time_left(hours: int) -> str:
    if hours >= 24:
        days = hours // 24
        if days % 10 == 1 and days % 100 != 11:
            return f"{days} –¥–µ–Ω—å"
        elif 2 <= days % 10 <= 4 and (days % 100 < 10 or days % 100 >= 20):
            return f"{days} –¥–Ω—è"
        else:
            return f"{days} –¥–Ω–µ–π"
    else:
        if hours % 10 == 1 and hours % 100 != 11:
            return f"{hours} —á–∞—Å"
        elif 2 <= hours % 10 <= 4 and (hours % 100 < 10 or hours % 100 >= 20):
            return f"{hours} —á–∞—Å–∞"
        else:
            return f"{hours} —á–∞—Å–æ–≤"

async def send_subscription_notification(bot: Bot, user_id: int, key_id: int, time_left_hours: int, expiry_date: datetime):
    try:
        from datetime import timezone, timedelta
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ç.–∫. expiry_date —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC
        current_time_utc = datetime.now(timezone.utc).replace(tzinfo=None)
        if expiry_date <= current_time_utc:
            logger.warning(f"Attempted to send expiry notification for already expired key {key_id} (user {user_id}). Skipping.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ time_left_hours —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        actual_time_left = expiry_date - current_time_utc
        actual_hours_left = int(actual_time_left.total_seconds() / 3600)
        if time_left_hours <= 0 or actual_hours_left <= 0:
            logger.warning(f"Invalid time_left_hours ({time_left_hours}) or actual_hours_left ({actual_hours_left}) for key {key_id}. Skipping notification.")
            return
        
        time_text = format_time_left(time_left_hours)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ UTC+3 (Moscow) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        moscow_tz = timezone(timedelta(hours=3))
        expiry_moscow = expiry_date.replace(tzinfo=timezone.utc).astimezone(moscow_tz)
        expiry_str = expiry_moscow.strftime('%d.%m.%Y –≤ %H:%M')

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        try:
            from shop_bot.data_manager.database import get_user_keys, get_key_by_id
            key_data = get_key_by_id(key_id) or {}
            host_name = key_data.get('host_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_keys = get_user_keys(user_id) or []
            key_number = next((i + 1 for i, k in enumerate(user_keys) if k.get('key_id') == key_id), 0)
        except Exception:
            host_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä'
            key_number = 0

        key_descriptor = f"#{key_number} ({host_name})" if key_number > 0 else f"({host_name})"

        # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from shop_bot.data_manager.database import get_user_balance
            balance_val = float(get_user_balance(user_id) or 0.0)
        except Exception:
            balance_val = 0.0
        balance_str = f"{balance_val:.2f} RUB"

        message = (
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** ‚ö†Ô∏è\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ {key_descriptor} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{time_text}**.\n"
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{expiry_str}**\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å : **{balance_str}**\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–æ—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN!"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"extend_key_{key_id}")
        builder.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_root")
        builder.adjust(2)

        await bot.send_message(chat_id=user_id, text=message, reply_markup=builder.as_markup(), parse_mode='Markdown')
        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        try:
            from shop_bot.data_manager.database import log_notification, get_user
            user = get_user(user_id)
            log_notification(
                user_id=user_id,
                username=(user or {}).get('username'),
                notif_type='subscription_expiry',
                title=f'–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—á–µ—Ä–µ–∑ {time_text})',
                message=message,
                status='sent',
                meta={
                    'key_id': key_id,
                    'expiry_at': expiry_str,
                    'time_left_hours': time_left_hours,
                    'key_number': key_number,
                    'host_name': host_name
                },
                key_id=key_id,
                marker_hours=time_left_hours
            )
        except Exception as le:
            logger.warning(f"Failed to log notification for user {user_id}: {le}")
        logger.info(f"Sent subscription notification to user {user_id} for key {key_id} ({time_left_hours} hours left).")
        
    except Exception as e:
        logger.error(f"Error sending subscription notification to user {user_id}: {e}")

def _cleanup_notified_users(all_db_keys: list[dict]):
    if not notified_users:
        return

    logger.info("Scheduler: Cleaning up the notification cache...")
    
    active_key_ids = {key['key_id'] for key in all_db_keys}
    
    users_to_check = list(notified_users.keys())
    
    cleaned_users = 0
    cleaned_keys = 0

    for user_id in users_to_check:
        keys_to_check = list(notified_users[user_id].keys())
        for key_id in keys_to_check:
            if key_id not in active_key_ids:
                del notified_users[user_id][key_id]
                cleaned_keys += 1
        
        if not notified_users[user_id]:
            del notified_users[user_id]
            cleaned_users += 1
    
    if cleaned_users > 0 or cleaned_keys > 0:
        logger.info(f"Scheduler: Cleanup complete. Removed {cleaned_users} user entries and {cleaned_keys} key entries from the cache.")

def _marker_logged(user_id: int, key_id: int, marker_hours: int, notif_type: str = 'subscription_expiry') -> bool:
    try:
        from shop_bot.data_manager.database import DB_FILE
        import sqlite3
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT 1 FROM notifications WHERE user_id = ? AND key_id = ? AND marker_hours = ? AND type = ? LIMIT 1",
                (user_id, key_id, marker_hours, notif_type)
            )
            return cursor.fetchone() is not None
    except Exception:
        return False

async def send_plan_unavailable_notice(bot: Bot, user_id: int, key_id: int, time_left_hours: int, expiry_date: datetime):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
    try:
        from datetime import timezone, timedelta
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
        current_time_utc = datetime.now(timezone.utc).replace(tzinfo=None)
        if expiry_date <= current_time_utc:
            logger.warning(f"Attempted to send plan unavailable notice for already expired key {key_id} (user {user_id}). Skipping.")
            return
        
        time_text = format_time_left(time_left_hours)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ UTC+3 (Moscow) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        moscow_tz = timezone(timedelta(hours=3))
        expiry_moscow = expiry_date.replace(tzinfo=timezone.utc).astimezone(moscow_tz)
        expiry_str = expiry_moscow.strftime('%d.%m.%Y –≤ %H:%M')

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        try:
            from shop_bot.data_manager.database import get_user_keys, get_key_by_id
            key_data = get_key_by_id(key_id) or {}
            host_name = key_data.get('host_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')
            user_keys = get_user_keys(user_id) or []
            key_number = next((i + 1 for i, k in enumerate(user_keys) if k.get('key_id') == key_id), 0)
        except Exception:
            host_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä'
            key_number = 0

        message = (
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à —Ç–∞—Ä–∏—Ñ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n\n"
            f"–ö–ª—é—á #{key_number} ({host_name}) –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_text}.\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {expiry_str}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞.\n\n"
            "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é: üõí –ö—É–ø–∏—Ç—å ‚Üí üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á"
        )

        await bot.send_message(chat_id=user_id, text=message)

        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        try:
            from shop_bot.data_manager.database import log_notification, get_user
            user = get_user(user_id)
            log_notification(
                user_id=user_id,
                username=(user or {}).get('username'),
                notif_type='subscription_plan_unavailable',
                title=f'–¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—á–µ—Ä–µ–∑ {time_text})',
                message=message,
                status='sent',
                meta={
                    'key_id': key_id,
                    'expiry_at': expiry_str,
                    'time_left_hours': time_left_hours,
                    'key_number': key_number,
                    'host_name': host_name
                }
            )
        except Exception as e:
            logger.warning(f"Failed to log plan unavailable notification: {e}")

        logger.info(f"Sent plan unavailable notice to user {user_id} for key {key_id}, time_left={time_left_hours}h")
    except Exception as e:
        logger.error(f"Failed to send plan unavailable notice to user {user_id} for key {key_id}: {e}", exc_info=True)


async def send_autorenew_balance_notice(bot: Bot, user_id: int, key_id: int, time_left_hours: int, expiry_date: datetime, balance_val: float):
    try:
        from datetime import timezone, timedelta
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ç.–∫. expiry_date —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC
        current_time_utc = datetime.now(timezone.utc).replace(tzinfo=None)
        if expiry_date <= current_time_utc:
            logger.warning(f"Attempted to send autorenew notice for already expired key {key_id} (user {user_id}). Skipping.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ time_left_hours —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        actual_time_left = expiry_date - current_time_utc
        actual_hours_left = int(actual_time_left.total_seconds() / 3600)
        if time_left_hours <= 0 or actual_hours_left <= 0:
            logger.warning(f"Invalid time_left_hours ({time_left_hours}) or actual_hours_left ({actual_hours_left}) for autorenew notice key {key_id}. Skipping notification.")
            return
        
        time_text = format_time_left(time_left_hours)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ UTC+3 (Moscow) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        moscow_tz = timezone(timedelta(hours=3))
        expiry_moscow = expiry_date.replace(tzinfo=timezone.utc).astimezone(moscow_tz)
        expiry_str = expiry_moscow.strftime('%d.%m.%Y –≤ %H:%M')

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        try:
            from shop_bot.data_manager.database import get_user_keys, get_key_by_id
            key_data = get_key_by_id(key_id) or {}
            host_name = key_data.get('host_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')
            user_keys = get_user_keys(user_id) or []
            key_number = next((i + 1 for i, k in enumerate(user_keys) if k.get('key_id') == key_id), 0)
        except Exception:
            host_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä'
            key_number = 0

        balance_str = f"{float(balance_val or 0):.2f} RUB"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        try:
            _, price_to_renew, _, _, _ = _get_plan_info_for_key(key_data)
        except Exception:
            price_to_renew = float(key_data.get('price') or 0.0)
        price_str = f"{float(price_to_renew or 0):.2f} RUB"

        message = (
            "‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ ‚ùî\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ #{key_number} ({host_name}) –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_text}.\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {expiry_str}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_str}\n\n"
            f"üîÑ –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å - –≤–∞–º –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ! –£—Å–ª—É–≥–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å—É–º–º–∞ {price_str} –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n"
            "‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏!"
        )

        await bot.send_message(chat_id=user_id, text=message)

        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        try:
            from shop_bot.data_manager.database import log_notification, get_user
            user = get_user(user_id)
            log_notification(
                user_id=user_id,
                username=(user or {}).get('username'),
                notif_type='subscription_autorenew_notice',
                title=f'–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ {time_text})',
                message=message,
                status='sent',
                meta={
                    'key_id': key_id,
                    'expiry_at': expiry_str,
                    'time_left_hours': time_left_hours,
                    'key_number': key_number,
                    'host_name': host_name,
                    'balance': balance_str,
                    'price': price_str
                },
                key_id=key_id,
                marker_hours=time_left_hours
            )
        except Exception as le:
            logger.warning(f"Failed to log autorenew notice for user {user_id}: {le}")
        logger.info(f"Sent autorenew balance notice to user {user_id} for key {key_id} ({time_left_hours} hours left).")
    except Exception as e:
        logger.error(f"Error sending autorenew notice to user {user_id}: {e}")

def _get_plan_info_for_key(key: dict) -> tuple[dict | None, float, int, int | None, bool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (plan_dict, price, months, plan_id, is_available) –¥–ª—è –∫–ª—é—á–∞.
    
    is_available = True, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    is_available = False, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å–∫—Ä—ã—Ç (hidden_all, hidden_old)
    """
    try:
        from shop_bot.data_manager.database import get_plans_for_host
        host_name = key.get('host_name')
        plan_name = key.get('plan_name')
        price_fallback = float(key.get('price') or 0.0)
        plans = get_plans_for_host(host_name) if host_name else []
        matched = next((p for p in plans if (p.get('plan_name') == plan_name)), None)
        
        if matched:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
            display_mode = matched.get('display_mode', 'all')
            # –¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            is_available = display_mode not in ['hidden_all', 'hidden_old']
            return matched, float(matched.get('price') or 0.0), int(matched.get('months') or 0), int(matched.get('plan_id')), is_available
        
        # –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return None, price_fallback, 0, None, False
    except Exception as e:
        logger.warning(f"Failed to resolve plan for key {key.get('key_id')}: {e}")
        return None, float(key.get('price') or 0.0), 0, None, False

async def check_expiring_subscriptions(bot: Bot):
    from datetime import timezone
    logger.info("Scheduler: Checking for expiring subscriptions...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è, —Ç.–∫. –≤—Å–µ –¥–∞—Ç—ã –≤ –ë–î —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ UTC
    current_time = datetime.now(timezone.utc).replace(tzinfo=None)
    all_keys = database.get_all_keys()
    
    _cleanup_notified_users(all_keys)
    
    for key in all_keys:
        try:
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if expiry_date.tzinfo is not None:
                expiry_date = expiry_date.replace(tzinfo=None)
            time_left = expiry_date - current_time

            if time_left.total_seconds() < 0:
                continue

            total_hours_left = int(time_left.total_seconds() / 3600)
            user_id = key['user_id']
            key_id = key['key_id']

            # –¶–µ–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
            plan_info, price_to_renew, months_to_renew, plan_id, is_plan_available = _get_plan_info_for_key(key)
            from shop_bot.data_manager.database import get_user_balance
            user_balance = float(get_user_balance(user_id) or 0.0)

            # Catch-up: —Ä–µ—à–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º –º–∞—Ä–∫–µ—Ä–µ
            # –í–∞–∂–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –∏—Å—Ç–µ–∫
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–µ–∫—É–Ω–¥–∞–º, –∞ –Ω–µ –ø–æ —Ü–µ–ª—ã–º —á–∞—Å–∞–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª—é—á–∏ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º < 1 —á–∞—Å–∞
            if time_left.total_seconds() > 0:
                # –ò—â–µ–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ä–∫–µ—Ä (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é: 1, 24, 48, 72)
                for hours_mark in sorted(NOTIFY_BEFORE_HOURS):
                    if total_hours_left <= hours_mark:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
                        if not is_plan_available:
                            # –¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å–∫—Ä—ã—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                            if not _marker_logged(user_id, key_id, hours_mark, 'subscription_plan_unavailable'):
                                await send_plan_unavailable_notice(bot, user_id, key_id, hours_mark, expiry_date)
                                notified_users.setdefault(user_id, {}).setdefault(key_id, set()).add(hours_mark)
                                break
                            continue
                        
                        balance_covers = price_to_renew > 0 and user_balance >= price_to_renew
                        if balance_covers:
                            # –ü–æ–¥–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ù–∞ 24—á ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø, –æ–¥–∏–Ω —Ä–∞–∑.
                            if hours_mark == 24 and not _marker_logged(user_id, key_id, hours_mark, 'subscription_autorenew_notice'):
                                await send_autorenew_balance_notice(bot, user_id, key_id, hours_mark, expiry_date, user_balance)
                                notified_users.setdefault(user_id, {}).setdefault(key_id, set()).add(hours_mark)
                                break
                            # 72/48/1 ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                            continue
                        else:
                            # –û–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            if not _marker_logged(user_id, key_id, hours_mark, 'subscription_expiry'):
                                await send_subscription_notification(bot, user_id, key_id, hours_mark, expiry_date)
                                notified_users.setdefault(user_id, {}).setdefault(key_id, set()).add(hours_mark)
                                break
            else:
                # –ö–ª—é—á —É–∂–µ –∏—Å—Ç–µ–∫ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                logger.debug(f"Key {key_id} for user {user_id} has already expired ({int(time_left.total_seconds())} seconds left). Skipping notifications.")

        except Exception as e:
            logger.error(f"Error processing expiry for key {key.get('key_id')}: {e}")

async def perform_auto_renewals(bot: Bot):
    """–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ."""
    try:
        all_keys = database.get_all_keys()
        now = datetime.now()
        for key in all_keys:
            try:
                expiry_date = datetime.fromisoformat(key['expiry_date'])
                # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if expiry_date.tzinfo is not None:
                    expiry_date = expiry_date.replace(tzinfo=None)
            except Exception:
                continue

            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –∏—Å—Ç—ë–∫
            if expiry_date > now:
                continue

            user_id = key['user_id']
            key_id = key['key_id']
            host_name = key.get('host_name')
            plan_info, price_to_renew, months_to_renew, plan_id, is_plan_available = _get_plan_info_for_key(key)

            # –¢—Ä–µ–±—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞–Ω, —Ü–µ–Ω—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
            if not plan_info or not months_to_renew or not plan_id or price_to_renew <= 0 or not is_plan_available:
                continue

            from shop_bot.data_manager.database import get_user_balance, add_to_user_balance, log_transaction, get_user
            current_balance = float(get_user_balance(user_id) or 0.0)
            if current_balance < price_to_renew:
                continue

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            metadata = {
                'user_id': user_id,
                'months': int(months_to_renew),
                'price': float(price_to_renew),
                'action': 'extend',
                'key_id': key_id,
                'host_name': host_name,
                'plan_id': int(plan_id),
                'customer_email': None,
                'payment_method': 'Auto-Renewal',
                'payment_id': payment_id
            }

            try:
                # –°–ø–∏—Å–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                add_to_user_balance(user_id, -float(price_to_renew))
                user = get_user(user_id) or {}
                username = user.get('username', 'N/A')
                log_transaction(
                    username=username,
                    transaction_id=None,
                    payment_id=payment_id,
                    user_id=user_id,
                    status='paid',
                    amount_rub=float(price_to_renew),
                    amount_currency=None,
                    currency_name=None,
                    payment_method='Auto-Renewal',
                    metadata=json.dumps(metadata)
                )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞, –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                from shop_bot.bot.handlers import process_successful_payment
                await process_successful_payment(bot, metadata)
                logger.info(f"Auto-renewal completed for user {user_id}, key {key_id} on host '{host_name}'.")
            except Exception as e:
                logger.error(f"Auto-renewal failed for user {user_id}, key {key_id}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"perform_auto_renewals: fatal error: {e}")

async def sync_keys_with_panels():
    logger.info("Scheduler: Starting sync with XUI panels...")
    total_affected_records = 0
    
    all_hosts = database.get_all_hosts()
    if not all_hosts:
        logger.info("Scheduler: No hosts configured in the database. Sync skipped.")
        return

    orphan_summary: list[tuple[str, int]] = []
    auto_delete = (database.get_setting("auto_delete_orphans") == "true")

    for host in all_hosts:
        host_name = host['host_name']
        logger.info(f"Scheduler: Processing host: '{host_name}'")
        
        try:
            api, inbound = xui_api.login_to_host(
                host_url=host['host_url'],
                username=host['host_username'],
                password=host['host_pass'],
                inbound_id=host['host_inbound_id']
            )

            if not api or not inbound:
                logger.error(f"Scheduler: Could not log in to host '{host_name}'. Skipping this host.")
                continue
            
            full_inbound_details = api.inbound.get_by_id(inbound.id)
            clients_on_server = {client.email: client for client in (full_inbound_details.settings.clients or [])}
            logger.info(f"Scheduler: Found {len(clients_on_server)} clients on the '{host_name}' panel.")

            keys_in_db = database.get_keys_for_host(host_name)
            
            for db_key in keys_in_db:
                key_email = db_key['key_email']
                expiry_date = datetime.fromisoformat(db_key['expiry_date'])
                # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if expiry_date.tzinfo is not None:
                    expiry_date = expiry_date.replace(tzinfo=None)
                now = datetime.now()
                if expiry_date < now - timedelta(days=5):
                    logger.info(f"Scheduler: Key '{key_email}' expired more than 5 days ago. Deleting from panel and DB.")
                    try:
                        await xui_api.delete_client_on_host(host_name, key_email)
                    except Exception as e:
                        logger.error(f"Scheduler: Failed to delete client '{key_email}' from panel: {e}")
                    database.delete_key_by_email(key_email)
                    total_affected_records += 1
                    continue

                server_client = clients_on_server.pop(key_email, None)

                if server_client:
                    reset_days = server_client.reset if server_client.reset is not None else 0
                    server_expiry_ms = server_client.expiry_time + reset_days * 24 * 3600 * 1000
                    local_expiry_dt = expiry_date
                    local_expiry_ms = int(local_expiry_dt.timestamp() * 1000)

                    if abs(server_expiry_ms - local_expiry_ms) > 1000:
                        database.update_key_status_from_server(key_email, server_client)
                        total_affected_records += 1
                        logger.info(f"Scheduler: Synced (updated) key '{key_email}' for host '{host_name}'.")
                else:
                    logger.warning(f"Scheduler: Key '{key_email}' for host '{host_name}' not found on server. Deleting from local DB.")
                    database.update_key_status_from_server(key_email, None)
                    total_affected_records += 1

            if clients_on_server:
                count_orphans = len(clients_on_server)
                orphan_summary.append((host_name, count_orphans))
                # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ —Å–ø–∏—Å–æ–∫ –¥–æ 5 —à—Ç. –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                sample = list(clients_on_server.keys())[:5]
                logger.warning(f"Scheduler: Found {count_orphans} orphan clients on host '{host_name}'. Sample: {sample}")
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–Ω–µ–ª–∏
                if auto_delete:
                    deleted = 0
                    for orphan_email in list(clients_on_server.keys()):
                        try:
                            await xui_api.delete_client_on_host(host_name, orphan_email)
                            deleted += 1
                        except Exception as de:
                            logger.error(f"Scheduler: Failed to auto-delete orphan '{orphan_email}' on '{host_name}': {de}")
                    total_affected_records += deleted
                    logger.info(f"Scheduler: Auto-deleted {deleted} orphan clients on host '{host_name}'.")

        except Exception as e:
            logger.error(f"Scheduler: An unexpected error occurred while processing host '{host_name}': {e}", exc_info=True)
            
    if orphan_summary:
        summary_str = ", ".join([f"{hn}:{cnt}" for hn, cnt in orphan_summary])
        logger.warning(f"Scheduler: Orphan summary -> {summary_str}")
    logger.info(f"Scheduler: Sync with XUI panels finished. Total records affected: {total_affected_records}.")

async def periodic_subscription_check(bot_controller: BotController):
    logger.info("Scheduler has been started.")
    await asyncio.sleep(10)

    while True:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            from shop_bot.data_manager.database import update_keys_status_by_expiry
            update_keys_status_by_expiry()
            
            await sync_keys_with_panels()

            if bot_controller.get_status().get("shop_bot_running"):
                bot = bot_controller.get_bot_instance()
                if bot:
                    await check_expiring_subscriptions(bot)
                    await perform_auto_renewals(bot)
                else:
                    logger.warning("Scheduler: Bot is marked as running, but instance is not available.")
            else:
                logger.info("Scheduler: Bot is stopped, skipping user notifications.")

        except Exception as e:
            logger.error(f"Scheduler: An unhandled error occurred in the main loop: {e}", exc_info=True)
            
        logger.info(f"Scheduler: Cycle finished. Next check in {CHECK_INTERVAL_SECONDS} seconds.")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)