#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Unicode –≤ —Ç–µ—Å—Ç–∞—Ö
"""

import sys
import os
from typing import Optional, Union


def safe_print(text: str, fallback_text: Optional[str] = None, file=None) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        fallback_text: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        file: –§–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é sys.stdout)
    
    Examples:
        >>> safe_print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        
        >>> safe_print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω", fallback_text="[OK] –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        
        >>> safe_print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω", fallback_text="[OK] –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        [OK] –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω  # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    """
    if file is None:
        file = sys.stdout
    
    try:
        print(text, file=file)
    except UnicodeEncodeError:
        if fallback_text:
            print(fallback_text, file=file)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ Unicode —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ ASCII
            safe_text = text.encode('ascii', 'replace').decode('ascii')
            print(safe_text, file=file)


def safe_print_error(text: str, fallback_text: Optional[str] = None) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ stderr —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        fallback_text: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    """
    safe_print(text, fallback_text, file=sys.stderr)


def get_encoding_info() -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ
    """
    return {
        'default_encoding': sys.getdefaultencoding(),
        'stdout_encoding': sys.stdout.encoding,
        'stderr_encoding': sys.stderr.encoding,
        'stdin_encoding': sys.stdin.encoding,
        'pythonioencoding': os.environ.get('PYTHONIOENCODING', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
        'pythonutf8': os.environ.get('PYTHONUTF8', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
        'platform': sys.platform,
        'version': sys.version
    }


def print_encoding_info() -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    """
    info = get_encoding_info()
    
    safe_print("=" * 60)
    safe_print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–î–ò–†–û–í–ö–ï PYTHON")
    safe_print("=" * 60)
    safe_print("")
    
    safe_print(f"Default encoding: {info['default_encoding']}")
    safe_print(f"stdout encoding: {info['stdout_encoding']}")
    safe_print(f"stderr encoding: {info['stderr_encoding']}")
    safe_print(f"stdin encoding: {info['stdin_encoding']}")
    safe_print("")
    safe_print(f"PYTHONIOENCODING: {info['pythonioencoding']}")
    safe_print(f"PYTHONUTF8: {info['pythonutf8']}")
    safe_print("")
    safe_print(f"Platform: {info['platform']}")
    safe_print(f"Python version: {info['version'].split()[0]}")
    safe_print("")


def test_unicode_output() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ Unicode —Å–∏–º–≤–æ–ª–æ–≤
    
    Returns:
        True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    """
    test_cases = [
        ("‚úÖ –≠–º–æ–¥–∑–∏", "[OK] –≠–º–æ–¥–∑–∏"),
        ("üöÄ –†–∞–∫–µ—Ç–∞", "[ROCKET] –†–∞–∫–µ—Ç–∞"),
        ("üåç –ú–∏—Ä", "[WORLD] –ú–∏—Ä"),
        ("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"),
        ("Hello ‰∏ñÁïå!", "Hello [WORLD]!"),
        ("–¢–µ—Å—Ç: Œ±Œ≤Œ≥Œ¥Œµ", "–¢–µ—Å—Ç: [GREEK]")
    ]
    
    safe_print("=" * 60)
    safe_print("–¢–ï–°–¢ UNICODE –í–´–í–û–î–ê")
    safe_print("=" * 60)
    safe_print("")
    
    all_passed = True
    
    for original, fallback in test_cases:
        try:
            safe_print(f"–¢–µ—Å—Ç: {original}")
            safe_print("  ‚úì –£—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            safe_print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
            safe_print(f"  Fallback: {fallback}")
            all_passed = False
    
    safe_print("")
    if all_passed:
        safe_print("‚úÖ –í–°–ï –¢–ï–°–¢–´ UNICODE –ü–†–û–ô–î–ï–ù–´")
    else:
        safe_print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° UNICODE")
    
    return all_passed


def print_test_header(title: str, width: int = 80) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
        width: –®–∏—Ä–∏–Ω–∞ —Ä–∞–º–∫–∏
    """
    safe_print("=" * width)
    safe_print(f"–¢–ï–°–¢: {title}")
    safe_print("=" * width)
    safe_print("")


def print_test_success(message: str = "–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!") -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    safe_print("")
    safe_print("=" * 80)
    safe_print(f"‚úÖ {message}")
    safe_print("=" * 80)


def print_test_failure(message: str = "–¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!") -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    safe_print("")
    safe_print("=" * 80)
    safe_print(f"‚ùå {message}")
    safe_print("=" * 80)


def print_test_info(message: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    safe_print(f"‚ÑπÔ∏è  {message}")


def print_test_warning(message: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    safe_print(f"‚ö†Ô∏è  {message}")


def print_test_error(message: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–µ—Å—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    safe_print(f"‚ùå {message}")


def print_test_step(step: int, total: int, description: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —à–∞–≥ —Ç–µ—Å—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    
    Args:
        step: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        description: –û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞
    """
    safe_print(f"{step}/{total}. {description}")


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print_encoding_info()
    test_unicode_output()
