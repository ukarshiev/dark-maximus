#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Python –≤ Windows
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —É—Ç–∏–ª–∏—Ç–∞–º
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))
sys.path.insert(0, str(project_root / "tests"))

from test_utils import (
    safe_print, 
    print_test_header, 
    print_test_success, 
    print_test_failure,
    print_test_info,
    print_test_warning,
    print_test_error,
    print_test_step,
    get_encoding_info,
    test_unicode_output
)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print_test_step(1, 6, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")
    
    version = sys.version_info
    safe_print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 6:
        safe_print("  ‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return True
    else:
        safe_print("  ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.6 –∏–ª–∏ –≤—ã—à–µ")
        return False


def check_encoding_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    print_test_step(2, 6, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
    
    info = get_encoding_info()
    
    safe_print(f"Default encoding: {info['default_encoding']}")
    safe_print(f"stdout encoding: {info['stdout_encoding']}")
    safe_print(f"stderr encoding: {info['stderr_encoding']}")
    safe_print(f"stdin encoding: {info['stdin_encoding']}")
    safe_print("")
    safe_print(f"PYTHONIOENCODING: {info['pythonioencoding']}")
    safe_print(f"PYTHONUTF8: {info['pythonutf8']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    issues = []
    
    if info['stdout_encoding'] != 'utf-8':
        issues.append(f"stdout –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {info['stdout_encoding']} –≤–º–µ—Å—Ç–æ utf-8")
    
    if info['stderr_encoding'] != 'utf-8':
        issues.append(f"stderr –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {info['stderr_encoding']} –≤–º–µ—Å—Ç–æ utf-8")
    
    if info['pythonioencoding'] == '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
        issues.append("PYTHONIOENCODING –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if info['pythonutf8'] == '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
        issues.append("PYTHONUTF8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if issues:
        safe_print("")
        print_test_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π:")
        for issue in issues:
            safe_print(f"  ‚Ä¢ {issue}")
        return False
    else:
        safe_print("")
        safe_print("  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True


def test_console_output():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print_test_step(3, 6, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å")
    
    test_cases = [
        ("–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç", "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"),
        ("–≠–º–æ–¥–∑–∏", "‚úÖ üöÄ üåç"),
        ("–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "Hello ‰∏ñÁïå! üåç"),
        ("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", "Œ±Œ≤Œ≥Œ¥Œµ Œ±Œ≤Œ≥Œ¥Œµ"),
        ("–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞", "Test —Ç–µ—Å—Ç Test")
    ]
    
    all_passed = True
    
    for test_name, test_text in test_cases:
        try:
            safe_print(f"  {test_name}: {test_text}")
        except Exception as e:
            safe_print(f"  ‚ùå {test_name}: –û—à–∏–±–∫–∞ - {e}")
            all_passed = False
    
    if all_passed:
        safe_print("  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
    else:
        safe_print("  ‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º")
    
    return all_passed


def test_file_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
    print_test_step(4, 6, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏")
    
    test_file = Path(__file__).parent / "test_encoding_temp.txt"
    test_content = "–¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! ‚úÖ üöÄ"
    
    try:
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        safe_print("  ‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (UTF-8)")
        
        # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(test_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if content == test_content:
            safe_print("  ‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (UTF-8)")
        else:
            safe_print("  ‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            return False
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file.unlink()
        safe_print("  ‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        safe_print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏: {e}")
        if test_file.exists():
            test_file.unlink()
        return False


def test_import_unicode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å Unicode"""
    print_test_step(5, 6, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
        from shop_bot.utils.deeplink import create_deeplink, parse_deeplink
        safe_print("  ‚úÖ –ò–º–ø–æ—Ä—Ç deeplink –º–æ–¥—É–ª—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ deeplink
        link = create_deeplink("testbot", group_code="—Ç–µ—Å—Ç", promo_code="–ü–†–û–ú–û")
        safe_print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ deeplink: {link}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        param = link.split("?start=")[1]
        group, promo, referrer = parse_deeplink(param)
        safe_print(f"  ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ deeplink: group='{group}', promo='{promo}'")
        
        return True
        
    except Exception as e:
        safe_print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
        return False


def provide_recommendations():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
    print_test_step(6, 6, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
    
    safe_print("")
    safe_print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú –° –ö–û–î–ò–†–û–í–ö–û–ô:")
    safe_print("")
    
    safe_print("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    safe_print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    safe_print("   ‚Ä¢ PYTHONIOENCODING=utf-8")
    safe_print("   ‚Ä¢ PYTHONUTF8=1")
    safe_print("")
    
    safe_print("2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:")
    safe_print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    safe_print("   .\\tests\\setup_test_environment.ps1 -Global")
    safe_print("")
    
    safe_print("3. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ PowerShell:")
    safe_print("   [Console]::OutputEncoding = [System.Text.Encoding]::UTF8")
    safe_print("   [Console]::InputEncoding = [System.Text.Encoding]::UTF8")
    safe_print("   chcp 65001")
    safe_print("")
    
    safe_print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
    safe_print("   python tests\\test_encoding.py")
    safe_print("")
    
    safe_print("5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ safe_print() –≤ –∫–æ–¥–µ:")
    safe_print("   from tests.test_utils import safe_print")
    safe_print("   safe_print('‚úÖ –¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏')")
    safe_print("")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_test_header("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Python")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = []
    
    results.append(check_python_version())
    results.append(check_encoding_settings())
    results.append(test_console_output())
    results.append(test_file_operations())
    results.append(test_import_unicode())
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    passed = sum(results)
    total = len(results)
    
    safe_print("")
    safe_print("=" * 80)
    safe_print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    safe_print("=" * 80)
    
    if passed == total:
        print_test_success("–í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print_test_failure(f"–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ.")
        provide_recommendations()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç Unicode
    safe_print("")
    test_unicode_output()
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
