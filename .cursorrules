# Правила для AI-ассистента Cursor

## Стили и UI
- Редактируй веб-интерфейс, соблюдая текущие стили, шрифты, цвета и элементы UI. Изменения должны улучшать UX и соответствовать современным best practices, но не ломать существующий дизайн. Фокус — удобство пользователя, логичность интерфейса и чистота визуального оформления.
- Если возможно использовать Material-UI (MUI) как основную дизайн-систему, используй.
- Все новые интерфейсы, компоненты и стили должны базироваться на компонентах из @mui/material и @mui/icons-material.
- Не использовать кастомные CSS-классы, если аналог можно сделать средствами MUI.
- Для верстки использовать Box, Grid, Stack.
- Для темизации использовать ThemeProvider и createTheme, придерживаясь единого стиля оформления.
- Все новые компоненты обязаны соответствовать гайдлайнам MUI: отступы, цвета, размеры брать из темы.
- Никогда не ставь для kebab-menu right:0 или left:0

## Tooltips для UI элементов
- Always add a tooltip (hover hint) to every interactive UI element:
  * Buttons
  * Inputs (text, select, checkbox, radio, etc.)
  * Links
  * Icons
  * Navigation items
- Tooltip must describe the element's function clearly and briefly.
- Use the standard approach for the chosen framework:
  * If plain HTML → use the `title="..."` attribute
  * If React + MUI → wrap the element in `<Tooltip title="..."> ... </Tooltip>`
  * If Bootstrap → use `data-bs-toggle="tooltip" title="..."`
- Tooltip text must follow this format:
  - Action verbs for buttons (e.g. "Добавить сервер")
  - Purpose for inputs (e.g. "Введите название хоста")
  - Explanation for icons (e.g. "Настройки пользователя")
- Do not skip any element, even if its meaning seems obvious.

## Терминал и команды
- Команды в терминале пиши для powershell, чтобы он понимал а не выдавал ошибку
- Пиши команды и значения так, чтобы не ломалась кодировка
- Всегда при выполнении команд в терминале вставляй небольшую задержку (например, 0.5–1 секунду) перед тем, как анализировать вывод.  
Если команда завершается мгновенно, всё равно жди этот delay, чтобы успеть перехватить результат.  
Если команда требует интерактивного ввода — не добавляй задержку.

## Документация
- При каждом изменении в коде проекта проверяй файлы в папке docs/. Если они устарели или требуют дополнения, автоматически актуализируй документацию: добавляй или редактируй разделы, обновляй диаграммы (PlantUML, Mermaid), корректируй примеры и ссылки. Стиль — простой и понятный, без лишней технической воды. В начале каждого изменённого .md-файла обновляй дату последней редакции

## CHANGELOG.md
1. Всегда проверяй наличие файла changelog.md. Если файл отсутствует, создавай его. Если файл существует, проанализируй изменения в проекте и дописывай файл новыми изменениями.
2. Никогда не редактируй существующие записи в CHANGELOG.md — даты и версии прошлых записей сохраняются без изменений.
3. Дважды перепроверь, чтобы время было по UTC+3.
4. Источник даты для новой записи:
   - Используй текущее время сервера (UTC Moscow).
   - Формат даты: DD.MM.YYYY. Если в файле уже есть запись с такой же датой — добавь временную метку HH:MM (формат: DD.MM.YYYY).
5. Версионирование:
   - Найди последнюю строку версии в формате X.Y.Z – DD.MM.YYYY
   - Определи bump по приоритету изменений: Мажор (архитектура) > Минор (новый функционал) > Патч (фиксы/мелкие доработки).
     * Если есть хотя бы один «новый функционал» → bump Y (минор) и Z = 0.
     * Если есть «мажорное» изменение (архитектурное, несовместимое) → bump X, Y = 0, Z = 0.
     * Иначе → bump Z (патч).
   - Если версия не найдена — начинай с 0.1.0.
6. Вставка записи:
   - Новая запись **вставляется в начало** файла (самая свежая сверху).
   - Не меняй порядок/даты/версии предыдущих записей.
7. Формат записи:
   X.Y.Z – DD.MM.YYYY
   - [Тип изменения] (Область) место — Краткое развернутое описание
   - ...
8. Логирование:
   - При автогенерации логируй источник даты (now UTC Moscow) в CI/логе.
   - Добавь проверку: новая дата либо позже последней, либо та же дата с временем (чтобы избежать коллизий).

## Язык общения
- Всегда используй русский язык для общения, комментариев, описаний и объяснений.  
Не используй английский, даже если исходный код или документация на английском.  
Всё обсуждение, пояснения, ответы на вопросы должны быть только на русском языке.  
Если случайно написал сообщение на английском — перепиши его на русском и продолжай диалог только на русском.

## Docker команды
Формат раздела:
"Что сделать, чтобы применить изменения:"
1) <команда>
2) <команда>
Кратко указать "почему" после каждой команды.

Логика выбора команд (Docker Compose, сервис `bot`):
- Если менял только Python-код (`src/shop_bot/**`, включая `webhook_server/*.py`, но без зависимостей):
  - docker compose restart bot
  - Почему: перезапуск подтянет изменения кода из volume.

- Если менял шаблоны/статику (`src/shop_bot/webhook_server/templates/**`, `src/shop_bot/webhook_server/static/**`):
  - Обнови страницу в браузере (Ctrl+F5)
  - При необходимости: docker compose restart bot
  - Почему: шаблоны/стили подхватываются из volume; перезапуск нужен только если кэш.

- Если менял `Dockerfile`:
  - docker compose build bot && docker compose up -d bot
  - Почему: требуется пересборка образа.

- Если менял зависимости (`pyproject.toml`):
  - docker compose down -v && docker compose build bot && docker compose up -d bot
  - Почему: нужен чистый venv-том и переустановка зависимостей.

- Если менял `docker-compose.yml`:
  - docker compose up -d --build
  - Почему: применить изменения сервисов/окружения и при необходимости пересобрать.

- Если менял конфиги, читаемые на старте (например, `src/shop_bot/config.py`):
  - docker compose restart bot
  - Почему: конфиг перечитывается при старте процесса.

- Если не уверен, какой вариант:
  - docker compose up -d --build
  - Почему: безопасно пересоздаёт контейнер с учётом всех изменений.

- Для проверки результата/ошибок всегда добавлять:
  - docker compose logs -f bot

## Docker Multi-stage Build
- Всегда использовать Docker multi-stage build для фронтенд-проектов.
- Никаких локальных npm install или npm run build вне контейнера.
- Сборка приложения должна происходить внутри Docker, с кэшированием зависимостей через слои.
- Пример базового шаблона:
```
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:1.27-alpine
COPY --from=builder /app/build /usr/share/nginx/html
```
- В результате итоговый образ содержит только собранное приложение и nginx (или другой веб-сервер).
- Локально разработка не требует npm build, всё управляется через контейнер.

## MCP Server
- Используй context7 (MCP Server)

## Git
- Пользователь имеет GitHub Desktop установлен и может предпочитать использовать его для Git операций.

## Предпочтения пользователя
- Пользователь предпочитает использовать MUI's mui-tel-input компонент для ввода телефонных номеров, а не кастомную реализацию intl-tel-input.
- Пользователь предпочитает сообщения без ненужных звёздочек (форматирование звездами).
- Пользователь предпочитает, чтобы ассистент создавал единый, универсально совместимый docker-compose файл и избегал создания нескольких файлов, специфичных для сервера.

