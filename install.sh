#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    echo -e "\n${RED}–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.${NC}"
    exit 1
}
trap 'handle_error $LINENO' ERR

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞
read_input() {
    if [ -t 0 ]; then
        read -p "$1" "$2" < /dev/tty
    else
        read -p "$1" "$2" || true
    fi
}

read_input_yn() {
    if [ -t 0 ]; then
        read -p "$1" -n 1 -r REPLY < /dev/tty
    else
        read -p "$1" -n 1 -r REPLY || true
    fi
    echo
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REPO_URL="https://github.com/ukarshiev/dark-maximus.git"
PROJECT_DIR="dark-maximus"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ docker compose –∫–æ–º–∞–Ω–¥—ã
if docker compose version >/dev/null 2>&1; then 
    DC=("docker" "compose")
    echo -e "${GREEN}‚úî Docker Compose v2 (–ø–ª–∞–≥–∏–Ω) —Ä–∞–±–æ—Ç–∞–µ—Ç.${NC}"
else 
    DC=("docker-compose")
    if ! command -v docker-compose &> /dev/null || ! docker-compose --version &> /dev/null; then
        echo -e "${YELLOW}Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose v1...${NC}"
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        echo -e "${GREEN}‚úî Docker Compose v1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
    else
        echo -e "${GREEN}‚úî Docker Compose v1 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
    fi
fi

echo -e "${GREEN}--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dark-maximus (HTTP) ---${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [ -f "docker-compose.yml" ]; then
    echo -e "\n${CYAN}–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.${NC}"
    
    echo -e "\n${CYAN}–®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Git...${NC}"
    git pull origin main
    echo -e "${GREEN}‚úî –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.${NC}"

    echo -e "\n${CYAN}–®–∞–≥ 2: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    sudo "${DC[@]}" down --remove-orphans
    sudo "${DC[@]}" up -d --build
    echo -e "${GREEN}‚úî –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.${NC}"

    echo -e "\n\n${GREEN}==============================================${NC}"
    echo -e "${GREEN}      üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ      ${NC}"
    echo -e "${GREEN}==============================================${NC}"
    echo -e "\n${YELLOW}–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup-ssl.sh${NC}"
    exit 0
fi

echo -e "\n${CYAN}–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
echo -e "${YELLOW}–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤...${NC}"
sudo apt update

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
echo -e "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã...${NC}"
sudo apt install -y \
    curl \
    wget \
    git \
    nginx \
    certbot \
    python3-certbot-nginx \
    ufw \
    openssl \
    dnsutils

echo -e "${GREEN}‚úî –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.${NC}"

echo -e "\n${CYAN}–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
if ! command -v docker &> /dev/null; then
    echo -e "${YELLOW}Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${NC}"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
    sudo apt remove -y docker docker-engine docker.io containerd runc || true
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    sudo apt install -y \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GPG –∫–ª—é—á Docker
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    
    echo -e "${GREEN}‚úî Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker${NC}"
else
    echo -e "${GREEN}‚úî Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
fi

echo -e "\n${CYAN}–®–∞–≥ 3: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
if [ -d "$PROJECT_DIR" ]; then
    echo -e "${YELLOW}–ü–∞–ø–∫–∞ $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º...${NC}"
    cd "$PROJECT_DIR"
    git pull origin main
    echo -e "${GREEN}‚úî –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω.${NC}"
else
    echo -e "${YELLOW}–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...${NC}"
    git clone "$REPO_URL" "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    echo -e "${GREEN}‚úî –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω.${NC}"
fi

echo -e "\n${CYAN}–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤...${NC}"

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω—ã
read_input "–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, panel.yourdomain.com): " MAIN_DOMAIN
read_input "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, docs.yourdomain.com): " DOCS_DOMAIN
read_input "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, help.yourdomain.com): " HELP_DOMAIN

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–º–µ–Ω—ã –≤–≤–µ–¥–µ–Ω—ã
if [ -z "$MAIN_DOMAIN" ] || [ -z "$DOCS_DOMAIN" ] || [ -z "$HELP_DOMAIN" ]; then
    echo -e "${RED}‚ùå –í—Å–µ –¥–æ–º–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úî –î–æ–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:${NC}"
echo -e "   - –ü–∞–Ω–µ–ª—å: ${MAIN_DOMAIN}"
echo -e "   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${DOCS_DOMAIN}"
echo -e "   - –ê–¥–º–∏–Ω-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${HELP_DOMAIN}"

echo -e "\n${CYAN}–®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...${NC}"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
mkdir -p nginx/ssl

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if [ ! -f "nginx/ssl/cert.pem" ] || [ ! -f "nginx/ssl/key.pem" ]; then
    echo -e "${YELLOW}–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...${NC}"
    openssl req -x509 -newkey rsa:2048 -keyout nginx/ssl/key.pem -out nginx/ssl/cert.pem -days 365 -nodes \
        -subj "/C=RU/ST=Moscow/L=Moscow/O=DarkMaximus/OU=IT/CN=dark-maximus.com"
    echo -e "${GREEN}‚úî –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã.${NC}"
else
    echo -e "${GREEN}‚úî –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.${NC}"
fi

echo -e "\n${CYAN}–®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (HTTP)...${NC}"

# –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è HTTP
cat > nginx/nginx.conf << EOF
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    upstream docs_backend {
        server docs:80;
    }

    upstream codex_docs_backend {
        server codex-docs:3000;
    }

    upstream bot_backend {
        server bot:1488;
    }

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $DOCS_DOMAIN
    server {
        listen 80;
        server_name $DOCS_DOMAIN;

        location / {
            proxy_pass http://docs_backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        location /health {
            proxy_pass http://docs_backend/health;
            access_log off;
        }
    }

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $HELP_DOMAIN
    server {
        listen 80;
        server_name $HELP_DOMAIN;

        location / {
            proxy_pass http://codex_docs_backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        location /health {
            proxy_pass http://codex_docs_backend/;
            access_log off;
        }
    }

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $MAIN_DOMAIN
    server {
        listen 80;
        server_name $MAIN_DOMAIN;

        location / {
            proxy_pass http://bot_backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
    }

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    server {
        listen 80 default_server;
        server_name _;
        return 444;
    }
}
EOF

echo -e "${GREEN}‚úî nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞.${NC}"

echo -e "\n${CYAN}–®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml...${NC}"

# –°–æ–∑–¥–∞–µ–º docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: dark-maximus-bot
    ports:
      - '1488:1488'
    volumes:
      - ./data:/app/project/data
      - ./logs:/app/project/logs
      - ./backups:/app/project/backups
    environment:
      - PYTHONPATH=/app/project
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1488/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  docs:
    build:
      context: .
      dockerfile: Dockerfile.docs
    restart: unless-stopped
    container_name: dark-maximus-docs
    ports:
      - '3001:80'
    volumes:
      - ./docs/user-docs:/usr/share/nginx/html/docs:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  codex-docs:
    build:
      context: .
      dockerfile: Dockerfile.codex-docs
    restart: unless-stopped
    container_name: dark-maximus-codex-docs
    ports:
      - '3002:3000'
    volumes:
      - ./docs/admin-docs:/usr/src/app/docs:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  nginx-proxy:
    image: nginx:alpine
    restart: unless-stopped
    container_name: dark-maximus-nginx-proxy
    user: root
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bot
      - docs
      - codex-docs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

volumes:
  data:
  logs:
  backups:
EOF

echo -e "${GREEN}‚úî docker-compose.yml —Å–æ–∑–¥–∞–Ω.${NC}"

echo -e "\n${CYAN}–®–∞–≥ 8: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...${NC}"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UFW
if command -v ufw &> /dev/null; then
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UFW...${NC}"
    sudo ufw --force enable
    sudo ufw allow ssh
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 1488/tcp
    echo -e "${GREEN}‚úî UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω.${NC}"
else
    echo -e "${YELLOW}UFW –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∞–π—Ä–≤–æ–ª–∞.${NC}"
fi

echo -e "\n${CYAN}–®–∞–≥ 9: –ó–∞–ø—É—Å–∫ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
sudo "${DC[@]}" up -d --build

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
sleep 10

if sudo "${DC[@]}" ps | grep -q "nginx-proxy.*Up"; then
    echo -e "${GREEN}‚úî nginx-proxy –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx-proxy!${NC}"
    echo -e "${YELLOW}–õ–æ–≥–∏ nginx-proxy:${NC}"
    sudo "${DC[@]}" logs nginx-proxy
    exit 1
fi

echo -e "\n${CYAN}–®–∞–≥ 10: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...${NC}"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
if [ -f "setup-admin-docs.sh" ]; then
    chmod +x setup-admin-docs.sh
    bash setup-admin-docs.sh
    echo -e "${GREEN}‚úî –ê–¥–º–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞.${NC}"
fi

echo -e "\n\n${GREEN}==============================================${NC}"
echo -e "${GREEN}      üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ      ${NC}"
echo -e "${GREEN}==============================================${NC}"

echo -e "\n${CYAN}üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (HTTP):${NC}"

echo -e "\n${YELLOW}1. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:${NC}"
echo -e "   - ${GREEN}http://${MAIN_DOMAIN}/login${NC}"

echo -e "\n${YELLOW}2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
echo -e "   - ${GREEN}http://${DOCS_DOMAIN}${NC}"

echo -e "\n${YELLOW}3. –ê–¥–º–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (Codex.docs):${NC}"
echo -e "   - ${GREEN}http://${HELP_DOMAIN}${NC}"

echo -e "\n${YELLOW}4. –ü—Ä—è–º—ã–µ –ø–æ—Ä—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏):${NC}"
echo -e "   - –ë–æ—Ç: ${GREEN}http://localhost:1488${NC}"
echo -e "   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${GREEN}http://localhost:3001${NC}"
echo -e "   - –ê–¥–º–∏–Ω-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${GREEN}http://localhost:3002${NC}"

echo -e "\n${CYAN}üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo -e "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS A-–∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
echo -e "2. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ${YELLOW}./setup-ssl.sh${NC}"
echo -e "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${YELLOW}docker compose ps${NC}"

echo -e "\n"
